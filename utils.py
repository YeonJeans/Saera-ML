import numpy as np
from pandas import DataFrame, Series

NAN = -1

graph_1 = {
    "label": "target",
    "pitch_x": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        29,
        30,
        31,
        34,
        35,
        36,
        39,
        40,
        41,
        42,
        43,
        44,
        46,
        47,
        48,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        61,
        62,
        63,
        64,
        77,
        78,
        79,
        80,
        81,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98
    ],
    "pitch_y": [
        0.38510799407958984,
        0.3961954116821289,
        0.3965352773666382,
        0.39658570289611816,
        0.4045286178588867,
        0.4626607596874237,
        0.5112909078598022,
        0.5252417325973511,
        0.538426399230957,
        0.5354131460189819,
        0.5655378699302673,
        0.5637024641036987,
        0.5505946278572083,
        0.5375474691390991,
        0.5223244428634644,
        0.5087040662765503,
        0.5060124397277832,
        0.49677348136901855,
        0.5502279996871948,
        0.560879111289978,
        0.5784233808517456,
        0.5985513925552368,
        0.6065154671669006,
        0.599539041519165,
        0.6032493114471436,
        0.6075941324234009,
        0.614975094795227,
        0.6226295828819275,
        0.6397407054901123,
        0.6425567865371704,
        0.6352427005767822,
        0.5909004211425781,
        0.5903264284133911,
        0.5791071653366089,
        0.5487216711044312,
        0.5015572309494019,
        0.49479204416275024,
        0.4544275104999542,
        0.45289337635040283,
        0.44299525022506714,
        0.4093781113624573,
        0.3708370327949524,
        0.3400304317474365,
        0.32419827580451965,
        0.31759271025657654,
        0.31315454840660095,
        0.3132156729698181,
        0.31786876916885376,
        0.3291468024253845,
        0.5153849720954895,
        0.5520882606506348,
        0.5790427923202515,
        0.5729116201400757,
        0.3852044939994812,
        0.3933887481689453,
        0.3998890519142151,
        0.42188912630081177,
        0.4338732957839966,
        0.5041986703872681,
        0.48860660195350647,
        0.47642093896865845,
        0.4627712070941925,
        0.44499653577804565,
        0.43287256360054016,
        0.42191410064697266,
        0.4325133264064789,
        0.4409240484237671,
        0.4445713758468628,
        0.4552234709262848,
        0.46373701095581055,
        0.47526684403419495,
        0.5011102557182312,
        0.540361762046814,
        0.5549062490463257
    ]
}

graph_2 = {
    "label": "user",
    "pitch_x": [
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        83,
        84,
        85,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        128,
        129,
        130,
        131,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        142,
        143,
        144,
        145,
        146
    ],
    "pitch_y": [
        0.40510907769203186,
        0.41992107033729553,
        0.42669838666915894,
        0.4344402551651001,
        0.44471895694732666,
        0.4531185030937195,
        0.46818864345550537,
        0.47918856143951416,
        0.4874953329563141,
        0.48859041929244995,
        0.48523277044296265,
        0.4801586866378784,
        0.49683672189712524,
        0.488739013671875,
        0.48026517033576965,
        0.4789533019065857,
        0.4772757589817047,
        0.47632622718811035,
        0.47546038031578064,
        0.48147115111351013,
        0.5193945169448853,
        0.5280735492706299,
        0.5259346961975098,
        0.5644407272338867,
        0.5512323379516602,
        0.5414133071899414,
        0.5546930432319641,
        0.5427463054656982,
        0.5419734716415405,
        0.5414338707923889,
        0.5256379246711731,
        0.5138001441955566,
        0.4997773766517639,
        0.48972463607788086,
        0.48228690028190613,
        0.49227824807167053,
        0.4820443391799927,
        0.48171836137771606,
        0.47427046298980713,
        0.4632130563259125,
        0.4570021629333496,
        0.4415333867073059,
        0.43337252736091614,
        0.4166471064090729,
        0.39717283844947815,
        0.3913012742996216,
        0.3935408592224121,
        0.3875139653682709,
        0.3845599293708801,
        0.38481178879737854,
        0.389810174703598,
        0.3937074542045593,
        0.3995702266693115,
        0.4069574773311615,
        0.41351526975631714,
        0.4127331078052521,
        0.39778566360473633,
        0.39692896604537964,
        0.3945862054824829,
        0.38965389132499695,
        0.4273936450481415,
        0.41542497277259827,
        0.3985927999019623,
        0.3852178454399109,
        0.37743011116981506,
        0.37381747364997864,
        0.36990442872047424,
        0.3909008204936981,
        0.38694238662719727,
        0.3908065855503082,
        0.4026815891265869,
        0.4118073284626007,
        0.41539978981018066
    ]
}


def fill_gap(graph, fill_with = NAN):
    # pitch_x가 빈 값 없이 연속적인 정수 값을 갖도록 바꾸고,
    # pitch_y 데이터 중 비어있는 값을 fill_with로 채운다.
    pitch_x, pitch_y = graph["pitch_x"], graph["pitch_y"]

    if len(pitch_x) == 0 and len(pitch_y) == 0:
        return None

    pitch_x_start_value = pitch_x[0]
    pitch_x = [x - pitch_x_start_value for x in pitch_x]

    pitch_x_last_value = pitch_x[-1]
    filled_pitch_x = [i for i in range(pitch_x_last_value + 1)]
    filled_pitch_y = [fill_with] * (pitch_x_last_value + 1)

    for i, x in enumerate(pitch_x):
        filled_pitch_y[x] = pitch_y[i]

    new_graph = {
        "pitch_x": filled_pitch_x,
        "pitch_y": filled_pitch_y
    }

    return new_graph


def scale(graph, target_length):
    # 더 짧은 그래프의 길이를 더 긴 그래프의 길이에 맞춰서 scale하고, 빈 값은 보간한다.
    if graph is None or len(graph["pitch_x"]) == 0 or len(graph["pitch_y"]) == 0:
        return None
    if target_length < len(graph["pitch_x"]):
        return graph
    
    scale_factor = target_length / len(graph["pitch_x"])

    scaled_graph = {
        "pitch_x": [round(x * scale_factor) for x in graph["pitch_x"]],
        "pitch_y": graph["pitch_y"]
    }

    scaled_graph = fill_gap(scaled_graph, NAN)

    return scaled_graph


def interpolate(graph, target=[ NAN ], method="values"):
    # target으로 채워진 값을 보간한다.
    ts = Series(graph["pitch_y"], index=graph["pitch_x"])

    ts.replace(target, np.nan, inplace=True)
    ts.interpolate(method=method, inplace=True)

    interpolated_graph = {
        "pitch_x": graph["pitch_x"],
        "pitch_y": ts.tolist()
    }
    
    return interpolated_graph
    

def preprocess(graph_1, graph_2):
    graph_1 = fill_gap(graph_1)
    graph_2 = fill_gap(graph_2)

    shorter_graph, longer_graph = sorted([graph_1, graph_2], key=lambda x: len(x["pitch_x"]))
    print(len(shorter_graph["pitch_x"]), len(longer_graph["pitch_x"]))

    target_length = len(longer_graph["pitch_x"])
    shorter_graph = scale(shorter_graph, target_length)

    shorter_graph = interpolate(shorter_graph)
    longer_graph = interpolate(longer_graph)

    return shorter_graph, longer_graph


def compare(target, user):
    # 두 그래프를 비교한다.
    graph_1, graph_2 = preprocess(target, user)
    # TODO

compare(graph_1, graph_2)